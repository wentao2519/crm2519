package com.waves.crm.workbench.mapper;

import com.waves.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 20:49:39 GMT+08:00 2022
     */
    int deleteByPrimaryKey(String id);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 20:49:39 GMT+08:00 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 20:49:39 GMT+08:00 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 20:49:39 GMT+08:00 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jun 09 20:49:39 GMT+08:00 2022
     */
    int updateByPrimaryKey(Activity record);


    /**
     * 保存创建好的市场活动
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);


    /**
     * 根据条件分页查询 activityList
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询市场活动总条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据ids数据批量删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 柑橘id查询市场活动
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    int updateActivity(Activity activity);

    /**
     * 查询所有市场活动
     * @return
     */
    List<Activity> selectAllActivity();

    /**
     * 根据id集合查询市场活动
     * @param ids
     * @return
     */
    List<Activity> selectAllActivityByIds(String[] ids);

    /**
     * 批量保存创建的市场活动
     * @param activityList
     * @return
     */
    int insertAllActivityByList(List<Activity> activityList);

    /**
     * 根据id查询市场活动明细信息
     * @param id
     * @return
     */
    Activity searchActivityForDetailById(String id);

    /**
     * 根据clueid查询相关联的市场活动
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据name 模糊查询市场活动 并且把clueId关联过的市场活动排除
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    /**
     * 根据ids查询市场活动的明细信息
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据name模糊查询市场活动 并且和clueId关联过的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String, Object> map);

    /**
     * 根据市场活动名 模糊查询
     * @param name
     * @return
     */
    List<Activity> selectActivityByName(String name);
}